generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password_hash String
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expiresAt  DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentType {
  CASH
  CARD
  REVOLUT
  SWEDBANK
}

enum OrderType {
  WEB
  MANUAL
}

enum OrderState {
  NEW
  PENDING
  SHIPPING
  FINISHED
  DELETED
}

model Product {
  id            Int     @id @default(autoincrement())
  sku           String  @unique
  title         String
  description   String
  price         Int?    @default(0)
  revolut_link  String?
  swedbank_link String?
  stock_qty     Int?    @default(0)
  slug          String  @unique
  order         Order[]
}

model Order {
  id               Int        @id @default(autoincrement())
  idHash           String     @unique @default(cuid())
  created_at       DateTime   @default(now())
  finished_at      DateTime?
  product          Product[]
  costumer         Costumer?  @relation(fields: [costumerId], references: [id])
  qty              Int        @default(1)
  order_price      Int        @default(0)
  payment_received Int        @default(0)
  order_type       OrderType  @default(MANUAL)
  costumerId       Int?
  order_state      OrderState @default(NEW)
  Payment          Payment[]
  note             String?
}

model Payment {
  id           Int         @id @default(autoincrement())
  payment_type PaymentType @default(CASH)
  created_at   DateTime    @default(now())
  order        Order?      @relation(fields: [orderId], references: [id])
  orderId      Int
  confirmed    Boolean     @default(false)
}

model Costumer {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  first_name   String?
  last_name    String?
  phone_number String?  @unique
  email        String?  @unique
  user_address String?
  region       String?
  order        Order[]
}
